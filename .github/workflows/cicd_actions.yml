name: CI/CD actions

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: windows-2025

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install missing SW tools
        run: |
          choco install cppcheck
          winget upgrade --id Kitware.CMake -e --accept-package-agreements --accept-source-agreements
          $url = "https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-mingw-w64-x86_64-arm-none-eabi.zip"
          $pathToFile = "${{runner.temp}}\arm-gnu.zip"
          $extractPath = "${{github.workspace}}\arm-gnu"
          Invoke-WebRequest -Uri $url -OutFile $pathToFile
          Expand-Archive -Path $pathToFile -DestinationPath $extractPath -Force
          

      - name: Add Arm-GNU to Path and build with it 
        run: |
          $env:Path ="${{github.workspace}}\arm-gnu\bin;" + $env:Path
          cmake -G "Ninja" -S .\ -B .\build
          cmake --build .\build

      - name: Create .txt file that contains list of all .c, .cpp, .h and .hpp files
        run: |
          $TargetFolder = ".\basic_demo"
          $OutputFile   = ".\cpplist.txt"

          Get-ChildItem -Path $TargetFolder -Recurse -File |
                Where-Object { $_.Extension -eq ".cpp" -or $_.Extension -eq ".hpp" -or $_.Extension -eq ".c" -or $_.Extension -eq ".h" } |
                Select-Object -ExpandProperty FullName |
                Out-File -FilePath $OutputFile -Encoding UTF8 -Force

      - name: Check code style with clang-format
        run: clang-format --Werror --dry-run --verbose --style=file --files=cpplist.txt

      - name: Run static analysis with clang-tidy
        run: python ".\cicd_pipeline\python\run-clang-tidy.py" -quiet -config-file ".clang-tidy" -p ".\build_clang" -source-filter "^(?!.*?pico-sdk).*$"

      - name: Run static analysis with Cppcheck
        run: |
          # Runner has another cppcheck.exe installed that is broken. To prevent calling it, add the correct version first in the Path.
          $env:Path = "C:\Program Files\Cppcheck;" + $env:Path
          cppcheck --enable=all --suppress=missingIncludeSystem --suppress=missingInclude --file-list=cpplist.txt --error-exitcode=1

      - name: Execute unit tests
        run: ctest  --test-dir ".\build_gnu"

      - name: Install pytest and run tests with it
        run: |
          pip install pytest
          pytest --rocket-path=D:/a/rocket_simulation/rocket_simulation/build_gnu/source/rocket/RocketSocketServer.exe -s
