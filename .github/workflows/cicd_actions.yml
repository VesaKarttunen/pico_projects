name: CI/CD actions

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: windows-2025

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install missing SW tools
        run: |
          # Cppcheck
          choco install cppcheck

          # CMake
          winget upgrade --id Kitware.CMake -e --accept-package-agreements --accept-source-agreements

          # Create SW tool download directory
          New-Item -Path .\download -ItemType Directory

          # ARM GNU toolchain for 32-bit bare-metal target for Windows 64-bit host
          $download_url = "https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-mingw-w64-x86_64-arm-none-eabi.zip"
          $path_zip     = ".\download\arm-gnu.zip"
          Invoke-WebRequest $download_url -OutFile $path_zip
          $path_extract = ".\toolchain\arm-gnu"
          Expand-Archive -Path $path_zip -DestinationPath $path_extract -Force

          # ARM Clang (LLVM) toolchain for 32-bit bare-metal target for Windows 64-bit host
          $download_url = "https://github.com/arm/arm-toolchain/releases/download/release-20.1.0-ATfE/ATfE-20.1.0-Windows-x86_64.zip"
          $path_zip     = ".\download\arm-clang.zip"
          Invoke-WebRequest $download_url -OutFile $path_zip
          $path_extract = ".\toolchain\arm-clang"
          Expand-Archive -Path $path_zip -DestinationPath $path_extract -Force

      - name: Build firmware with Arm-GNU toolchain
        run: |
          cmake -G "Ninja" -S .\ -B .\build_gnu -D WIFI_SSID=dummy -D WIFI_PASSWORD=dummy -D PICO_TOOLCHAIN_PATH=.\toolchain\arm-gnu
          cmake --build .\build_gnu

      - name: Build firmware with Arm-Clang toolchain
        run: |
          cmake -G "Ninja" -S .\ -B .\build_clang -D WIFI_SSID=dummy -D WIFI_PASSWORD=dummy -D PICO_COMPILER=pico_arm_clang -D PICO_TOOLCHAIN_PATH=.\toolchain\arm-clang\ATfE-20.1.0-Windows-x86_64
          cmake --build .\build_clang

      - name: Create source file list for static analysis and format checks
        run: python .\cicd_pipeline\script\generate_source_file_list.py .\ source_file_list.txt

      - name: Check code style with clang-format
        run: clang-format --Werror --dry-run --verbose --style=file --files=source_file_list.txt

      - name: Run static analysis with clang-tidy
        run: python .\cicd_pipeline\script\run-clang-tidy.py -quiet -config-file .clang-tidy -p .\build_clang -source-filter "^(?!.*?catch2|.*?pico-sdk|.*?FreeRTOS-Kernel).*$"

      - name: Run static analysis with Cppcheck
        run: |
          # Runner has another cppcheck.exe installed that is broken. To prevent calling it, add the correct version first in the Path.
          $env:Path = "C:\Program Files\Cppcheck;" + $env:Path
          cppcheck `
            --check-level=exhaustive `
            --enable=all `
            --inconclusive `
            --suppress=missingIncludeSystem `
            --suppress=missingInclude `
            --suppress=unusedStructMember `
            --inline-suppr `
            --file-list=source_file_list.txt `
            --error-exitcode=1
