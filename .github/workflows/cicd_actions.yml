name: CI/CD actions

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install missing SW tools
        run: |
          # Get Clang-format, Clang-tidy, Cppcheck and Ninja
          sudo apt-get update
          sudo apt-get install -y clang clang-format clang-tidy clang-tools gcc-arm-none-eabi cppcheck ninja-build

          # Create SW tool download directory
          mkdir -p ./download

          # ARM GNU toolchain for 32-bit bare-metal target for Linux 64-bit host
          download_url="https://developer.arm.com/-/media/Files/downloads/gnu/14.2.rel1/binrel/arm-gnu-toolchain-14.2.rel1-x86_64-arm-none-eabi.tar.xz"
          path_tar="./download/arm-gnu.tar.xz"
          wget "$download_url" -O "$path_tar"
          path_extract="./toolchain/arm-gnu"
          mkdir -p "$path_extract"
          tar -C "$path_extract" --strip-components=1 -xf "$path_tar"

          # ARM Clang (LLVM) toolchain for 32-bit bare-metal target for Linux 64-bit host
          download_url="https://github.com/arm/arm-toolchain/releases/download/release-20.1.0-ATfE/ATfE-20.1.0-Linux-x86_64.tar.xz"
          path_tar="./download/arm-clang.tar.xz"
          wget "$download_url" -O "$path_tar"
          path_extract="./toolchain/arm-clang"
          mkdir -p "$path_extract"
          tar -C "$path_extract" --strip-components=1 -xf "$path_tar"

      - name: Build firmware with Arm-GNU toolchain
        run: |
          cmake -G Ninja -S ./ -B ./build_gnu -D WIFI_SSID=dummy -D WIFI_PASSWORD=dummy -D PICO_TOOLCHAIN_PATH=${{github.workspace}}/toolchain/arm-gnu
          cmake --build ./build_gnu

      - name: Build firmware with Arm-Clang toolchain
        run: |
          export PATH=./toolchain/arm-clang/bin:$PATH
          cmake -G Ninja -S ./ -B ./build_clang -D WIFI_SSID=dummy -D WIFI_PASSWORD=dummy -D PICO_COMPILER=pico_arm_clang -D PICO_TOOLCHAIN_PATH=${{github.workspace}}/toolchain/arm-clang
          cmake --build ./build_clang

      - name: Create source file list for static analysis and format checks
        run: python ./cicd_pipeline/script/generate_source_file_list.py ./ source_file_list.txt

      - name: Check code style with clang-format
        run: clang-format --Werror --dry-run --verbose --style=file --files=source_file_list.txt

      - name: Run static analysis with Cppcheck
        run: |
          # Runner has another cppcheck.exe installed that is broken. To prevent calling it, add the correct version first in the Path.
          cppcheck \
            --check-level=exhaustive \
            --enable=all \
            --inconclusive \
            --suppress=missingIncludeSystem \
            --suppress=missingInclude \
            --suppress=unusedStructMember \
            --inline-suppr \
            --file-list=source_file_list.txt \
            --error-exitcode=1
