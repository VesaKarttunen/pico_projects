name: CI/CD actions

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install missing SW tools
        run: |
          # The easiest way to install the recent version of clang-format and clang-tidy is pip,
          # since default apt-get package repos don't have the latest versions for ubuntu-24.04.
          pip install clang-format
          pip install clang-tidy

          # ARM GNU toolchain for 32-bit bare-metal target for Linux 64-bit host
          mkdir -p ./download
          download_url="https://developer.arm.com/-/media/Files/downloads/gnu/14.3.rel1/binrel/arm-gnu-toolchain-14.3.rel1-x86_64-arm-none-eabi.tar.xz"
          path_tar="./download/arm-gnu.tar.xz"
          wget "$download_url" -O "$path_tar"
          path_extract="./toolchain/arm-gnu"
          mkdir -p "$path_extract"
          tar -C "$path_extract" --strip-components=1 -xf "$path_tar"

          # ARM Clang (LLVM) toolchain for 32-bit bare-metal target for Linux 64-bit host
          download_url="https://github.com/arm/arm-toolchain/releases/download/release-20.1.0-ATfE/ATfE-20.1.0-Linux-x86_64.tar.xz"
          path_tar="./download/arm-clang.tar.xz"
          wget "$download_url" -O "$path_tar"
          path_extract="./toolchain/arm-clang"
          mkdir -p "$path_extract"
          tar -C "$path_extract" --strip-components=1 -xf "$path_tar"

          # The easiest way to install the latest version of cppcheck is build it from the source
          git clone --branch 2.17.x https://github.com/danmar/cppcheck.git ./toolchain/cppcheck
          cmake -G Ninja -S ./toolchain/cppcheck -B ./toolchain/cppcheck/build
          cmake --build ./toolchain/cppcheck/build

      - name: Build firmware with Arm-GNU toolchain
        run: |
          cmake -G Ninja -S ./ -B ./build_gnu -D PICO_TOOLCHAIN_PATH=${{github.workspace}}/toolchain/arm-gnu
          cmake --build ./build_gnu

      - name: Build firmware with Arm-Clang toolchain
        run: |
          cmake -G Ninja -S ./ -B ./build_clang -D PICO_COMPILER=pico_arm_clang -D PICO_TOOLCHAIN_PATH=${{github.workspace}}/toolchain/arm-clang
          cmake --build ./build_clang

      - name: Create source file list for static analysis and format checks
        run: python ./cicd_pipeline/script/generate_source_file_list.py ./ source_file_list.txt

      - name: Check code style with clang-format
        run: |
          clang-format --version
          clang-format \
           --Werror \
           --dry-run \
           --verbose \
           --style=file \
           --files=source_file_list.txt

      - name: Run static analysis with clang-tidy
        run: |
          clang-tidy --version
          python ./cicd_pipeline/script/run-clang-tidy.py \
            -quiet \
            -config-file .clang-tidy \
            -p ./build_clang \
            -source-filter "^(?!.*?catch2|.*?pico-sdk|.*?FreeRTOS-Kernel).*$"

      - name: Run static analysis with Cppcheck
        run: |
          PATH="./toolchain/cppcheck/build/bin:$PATH"
          cppcheck --version
          cppcheck \
            --check-level=exhaustive \
            --enable=all \
            --inconclusive \
            --suppress=missingIncludeSystem \
            --suppress=missingInclude \
            --suppress=unusedStructMember \
            --inline-suppr \
            --file-list=source_file_list.txt \
            --error-exitcode=1
